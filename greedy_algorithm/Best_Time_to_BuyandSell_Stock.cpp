/*
Q122
给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

 

示例 1:

输入: prices = [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:

输入: prices = [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，
     你必须在再次购买前出售掉之前的股票。

示例 3:

输入: prices = [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

*/

#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    /*
    此类股票售卖问题无需DP算法。
    根据"贪心算法"的思想，我们一旦发现某一天的价格大于前一天，就把差值作为利润的一部分加入
    为什么这样的局部最优会成立？
        因为此题并不限制"多次买卖"的行为，我们下意识地想要从买入股票的那一天之后去找
        差值最大的那一天售卖以攫取最大利益。
        其实简单地想一想你把所有的利息收集起来那不就是最大收益了吗，比如票价 1 2 3
        我们算法的思想是 票价为2的时候卖出，比1多出来1块钱。同时2的时候再买入，3卖出。
    */
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        for(int i = 1 ; i < prices.size() ; i ++){
            if(prices[i] > prices[i - 1]){
                profit += prices[i] - prices[i - 1];
            }
        }
        return profit;
    }
};

int main(){
    return 0;
}