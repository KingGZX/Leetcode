/*
Q406
假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。
每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。

请你重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue ，
其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。

示例 1：

输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
解释：
编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。

*/

#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

class Solution {
public:
    /*
    简述解题思路：
        先按照身高从高到矮进行排序，如果身高相同的情况下按照“前面人数”从小到大排序

        我们假设ans容器，也就是我们最后返回的答案是一个一直能保持题目要求的容器！
        所以，我们按顺序遍历上述排好序的people，对于每一个person，假如其要求的前面的人数值大于等于当前
        答案容器的大小，则直接将他放入进来，具体调用push_back。
        而假如某个人要求的前面的人数小于当前容器的值，那么我们执行插入操作，按照需求的人数作为位置进行插入。

        为什么可行？
            因为身高被从高到矮进行排序了，高的人要求前面的人数可能会和矮的人的需求相同，但矮的人总是晚
            被遍历到，其可能会插入到原本就放着的高的人的位置上，对两者都是不会产生影响的。高的人前面多出来一个
            比他矮的人不会出错，而矮的人放在那个位置更加不会出错。
            ----------当然这一切都是基于合法的数据，否则应该会有bug的。很简单比如---[5, 0], [6, 0]安排不了的
    */
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        vector<vector<int>> ans;
        sort(people.begin(), people.end(), [](const vector<int>& p1, const vector<int>& p2){
            if(p1[0] == p2[0])
                return p1[1] < p2[1];
            return p1[0] > p2[0]; 
        });
        for(auto obj : people){
            if(obj[1] >= ans.size()){
                ans.push_back(obj);
            }
            else{
                ans.insert(ans.begin() + obj[1], obj);
            }
        }
        return ans;
    }
};

int main(){
    vector<vector<int>> vec{{7,0},{4,4},{7,1},{5,0},{6,1},{5,2}};
    Solution s;
    s.reconstructQueue(vec);
    return 0;
}