/*
 * @author: Zhexuan Gu
 * @Date: 2023-01-17 10:46:50
 * @LastEditTime: 2023-01-17 10:52:51
 * @FilePath: /CPPprojects/Leetcode/剑指Offer/num_of_bit_1.cpp
 * @Description: Please implement
 */
#include <iostream>
#include <vector>
using namespace std;

/*
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为 汉明重量).）。

提示：

请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，
并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用 二进制补码 记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 

示例 1：
输入：n = 11 (控制台输入 00000000000000000000000000001011)
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。

示例 2：
输入：n = 128 (控制台输入 00000000000000000000000010000000)
输出：1
解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。

示例 3：
输入：n = 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n = -3）
输出：31
解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
*/

class Solution {
public:
    int hammingWeight(uint32_t n) {
        int num = 0;
        while(n){
            num += n % 2;
            n = n >> 1;
        }
        return num;
    }
};

/*
思路很简单(懂二进制编码的情况下):

二进制码中间位的1很难统计，那就统计末尾那个1呗。

末尾是1代表其是奇数，所以只要是奇数num就会增1否则不会增加。

末尾那个1判断后，顺序判断倒数第二位，那么要做的就是移走当前末尾位，让倒数第二位成为末尾位，就是右移。
*/

int main(){

    return 0;
}